/**
 * Copyright (c) 2020 Patrik Forsberg <patrik.forsberg@coldmind.com> - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential.
 * 2020-06-10
 */

import * as bcrypt from 'bcryptjs';

export interface ICompareRes {
	error: Error;
	match: boolean;
}

export default class AuthBCrypt {

	public static hashPassword(password: string, rounds: number, callback: (error: Error, hash: string) => void): void {
		bcrypt.hash(password, rounds, (error, hash) => {
			callback(error, hash);
		});
	}

	public static compare(password: string, dbHash: string, callback: (error: string | null, match: boolean | null) => void) {
		bcrypt.compare(password, dbHash, (err: Error, match: boolean) => {
			if (match) {
				// passwords match
				callback(null, true);
			}
			else {
				// passwords do not match
				callback('Invalid password match', null);
			}
		});
	}

	public static doCompare(password: string, dbHash: string): Promise<ICompareRes> {
		console.log('doCompare :: A ::', password);
		console.log('doCompare :: B ::', dbHash);

		return new Promise((resolve, reject) => {
			bcrypt.compare(password, dbHash, (err: Error, match: boolean) => {
				if (match) {
					// passwords match
					resolve(
						{
							error: null,
							match: true
						});
				}
				else {
					// passwords do not match
					resolve(
						{
							error: err,
							match: false
						});
				}
			});

		});
	}
}

/*/ let auth = new AuthBCrypt();
AuthBCrypt.hashPassword('kalle', 10, (error: Error, hash: string) => {
	console.log('HASH ::', hash);
});

AuthBCrypt.doCompare('kalle', '$2a$10$iPSCWOBm4MgxH85GmT/.buyKcLo3xqZzTjyLkEv6ujvuLD3EH8m1e')
		  .then(res => {
			  console.log('res ::', res);
		  }).catch(err => {
	console.log('err ::', err);
});
*/
