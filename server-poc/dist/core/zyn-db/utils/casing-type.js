'use strict';Object.defineProperty(exports,'__esModule',{value:true});let log=console.log;var CasingType;(function(CasingType){CasingType[CasingType['None']=0]='None';CasingType[CasingType['Snake']=1]='Snake';CasingType[CasingType['Dash']=2]='Dash';CasingType[CasingType['Pascal']=3]='Pascal';CasingType[CasingType['Camel']=4]='Camel';CasingType[CasingType['Word']=5]='Word';}(CasingType||(CasingType={})));class StringCasing{static testLog(desc,value){log(desc,value);}static testLogBool(desc,value){let valueStr=value?'true':'false';log(desc,valueStr);}static validStr(str){return!(str===undefined||(!str||0===str.length));}static isLetter(char){let firstChar=char.charAt(0).toUpperCase();return!(firstChar.toLowerCase()==firstChar);}static onlyLetters(str){return/^[a-zA-Z]+$/.test(str);}static upperFirst(str){return str.charAt(0).toUpperCase()+str.slice(1);}static lowerFirst(str){return str.charAt(0).toLowerCase()+str.slice(1);}static isFirstUpper(str){if(!StringCasing.validStr(str))return false;return StringCasing.isUpperCase(str.charAt(0));}static isFirstLower(str){if(!StringCasing.validStr(str))return false;return StringCasing.isLowerCase(str.charAt(0));}static isLowerCase(str){return!StringCasing.isUpperCase(str);}static isUpperCase(str){return str.toUpperCase()==str;}static haveUpperCaseChar(str){let char='';let result=false;for(let i=0;i<str.length;i++){char=str[i];if(StringCasing.isUpperCase(char)){result=true;break;}}return result;}static invertCasing(data,toLowerPascal=false){if(data.indexOf('_')>-1||data.indexOf('-')>-1){return StringCasing.snakeToPascalCase(data,toLowerPascal);}else{return StringCasing.pascalToSnakeCase(data);}}static unifyString(data,fillChar='_',stripNoneLetters=false){let prevChar='';let currChar='';let aheadChar='';let chunk='';for(let i=0;i<data.length;i++){let isFirstChar=i==0;prevChar=currChar;currChar=data[i];aheadChar=data[i+1];if(!StringCasing.onlyLetters(currChar)){currChar=fillChar;if(stripNoneLetters)continue;}if(prevChar==fillChar&&currChar==fillChar)continue;chunk+=currChar;}return chunk;}static convertFromPascalCasing(data,dashCase=false){if(data.length<3){return data.toLowerCase();}let currChar='';let aheadChar='';let chunk='';for(let i=0;i<data.length;i++){currChar=data[i];aheadChar=data[i+1];if(i>0&&StringCasing.isUpperCase(currChar)){chunk+=dashCase?'-':'_';}chunk+=currChar;}return chunk.toLowerCase();}static snakeToPascalCase(data,lowerPascal=false){let currChar='';let aheadChar='';let chunk='';for(let i=0;i<data.length;i++){let isFirstChar=i==0;currChar=data[i];aheadChar=data[i+1];if(isFirstChar){chunk+=lowerPascal?currChar.toLowerCase():currChar.toUpperCase();continue;}if(currChar=='_'||currChar=='-'){chunk+=StringCasing.validStr(aheadChar)?aheadChar.toUpperCase():'';i++;continue;}chunk+=currChar;}return chunk;}static snakeToCamelCase(data){return StringCasing.snakeToPascalCase(data,true);}static snakeToDashCase(data){return StringCasing.unifyString(data,'-');}static dashToPascalCase(data){return StringCasing.invertCasing(data);}static dashToCamelCase(data){return StringCasing.invertCasing(data,true);}static dashToSnakeCase(data){return StringCasing.unifyString(data,'_');}static pascalToSnakeCase(data){return StringCasing.convertFromPascalCasing(data);}static pascalToDashCase(data){return StringCasing.convertFromPascalCasing(data,true);}static pascalToCamelCase(data){return StringCasing.lowerFirst(data);}static camelToPascalCase(data){return StringCasing.upperFirst(data);}static camelToSnakeCase(data){return StringCasing.convertFromPascalCasing(data);}static camelToDashCase(data){return StringCasing.convertFromPascalCasing(data);}static toSnakeCase(data){data=StringCasing.unifyString(data,'_');return data.toLowerCase();}static toDashCase(data){data=StringCasing.unifyString(data,'-');return data.toLowerCase();}static toPascalCase(data,lowerFirst=false){if(!StringCasing.onlyLetters(data)){data=StringCasing.unifyString(data);}if(!StringCasing.onlyLetters(data)){data=StringCasing.unifyString(data);data=StringCasing.snakeToPascalCase(data,lowerFirst);}else{data=lowerFirst?StringCasing.lowerFirst(data):StringCasing.upperFirst(data);}return data;}static toCamelCase(data){return StringCasing.toPascalCase(data,true);}static test(){let snakeCase='player_base_data_here_we_come';StringCasing.testLogBool('Is Letter \'A\':',StringCasing.isLetter('A'));StringCasing.testLogBool('Is Letter \'?\':',StringCasing.isLetter('?'));StringCasing.testLogBool('Is UpperCase \'A\':',StringCasing.isUpperCase('A'));StringCasing.testLogBool('Is UpperCase \'a\':',StringCasing.isUpperCase('a'));StringCasing.testLogBool('Is LowerCase \'y\':',StringCasing.isLowerCase('y'));StringCasing.testLogBool('Is LowerCase \'Y\':',StringCasing.isLowerCase('Y'));let tmp=snakeCase;console.log('------------');StringCasing.testLog('Snake:',snakeCase);let pascalCase=StringCasing.snakeToPascalCase(snakeCase);StringCasing.testLog('Snake to: Pascal:',pascalCase);tmp=StringCasing.snakeToPascalCase(snakeCase,true);StringCasing.testLog('Snake to: Lower Pascal:',tmp);console.log('------------');tmp=StringCasing.pascalToSnakeCase(pascalCase);StringCasing.testLog('Pascal to: Snake:',tmp);tmp=StringCasing.pascalToDashCase(pascalCase);StringCasing.testLog('Pascal to: Dash:',tmp);console.log('------------');tmp=StringCasing.invertCasing(pascalCase);StringCasing.testLog('Inverted from Pascal:',tmp);tmp=StringCasing.invertCasing(snakeCase);StringCasing.testLog('Inverted from Snake:',tmp);tmp=StringCasing.invertCasing(snakeCase,true);StringCasing.testLog('Inverted from Snake (lower flag):',tmp);StringCasing.testExperimental('OneStringToRuleThemAll');}static testExperimental(data){console.log('toSnakeCase ::',StringCasing.toSnakeCase(data));console.log('toDashCase ::',StringCasing.toDashCase(data));console.log('toPascalCase ::',StringCasing.toPascalCase(data));console.log('toCameCase ::',StringCasing.toCamelCase(data));}}exports.StringCasing=StringCasing;