'use strict';var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if(typeof Reflect==='object'&&typeof Reflect.decorate==='function')r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;return c>3&&r&&Object.defineProperty(target,key,r),r;};var __metadata=this&&this.__metadata||function(k,v){if(typeof Reflect==='object'&&typeof Reflect.metadata==='function')return Reflect.metadata(k,v);};var __param=this&&this.__param||function(paramIndex,decorator){return function(target,key){decorator(target,key,paramIndex);};};Object.defineProperty(exports,'__esModule',{value:true});const inversify_1=require('inversify');const inversify_2=require('inversify');const base_controller_1=require('../../controllers/base.controller');const cli_logger_1=require('../../../core/cli/cli.logger');const interfaces_1=require('../../../core/interfaces');const igniter_controller_1=require('../../../core/webcore/igniter.controller');const fm_admin_db_beta_1=require('./fm-admin-db-beta');const db_transaction_1=require('../../../core/db-igniter/db-transaction');const sql_igniter_1=require('../../../core/db-igniter/sql-igniter/sql-igniter');const fm_admin_db_1=require('./fm-admin-db');const fm_data_validator_1=require('./fm-data-validator');const fm_price_converter_1=require('./fm-price-converter');const fm_db_1=require('./fm.db');let FoodMenuAdminController=class FoodMenuAdminController extends igniter_controller_1.IgniterController{constructor(menuDb,adminDb,betaDb,priceConverter){super();this.menuDb=menuDb;this.adminDb=adminDb;this.betaDb=betaDb;this.priceConverter=priceConverter;}initRoutes(routes){routes.get('/executeNewRecord').bind(this);routes.get('/fluid/new',this.debugMenuNew.bind(this));routes.get('/fluid/update',this.debugMenuUpdate.bind(this));routes.post('/restaurant/menu/add',this.addMenuItem.bind(this));routes.post('/restaurant/menu/set',this.setMenu.bind(this));routes.post('/restaurant/menu/addcat',this.addMenuCategory.bind(this));}debugMenuNew(req,resp){cli_logger_1.Logger.logPurple('FmAdminController :: debugMenuNew');let data={restaurant_id:1,weight:22};this.betaDb.testNew(data).then(res=>{console.log('setFoodMenu ::',res);resp.json(res);}).catch(err=>{cli_logger_1.Logger.logError('setRecord :: error ::',err);base_controller_1.BaseController.extFatalError(req,resp);resp.json(err);});}debugMenuUpdate(req,resp){cli_logger_1.Logger.logPurple('FmAdminController :: debugMenuNew');let data={id:1,restaurant_id:1,weight:22};this.betaDb.testUpdate(data).then(res=>{console.log('setFoodMenu ::',res);resp.json(res);}).catch(err=>{cli_logger_1.Logger.logError('setRecord :: error ::',err);base_controller_1.BaseController.extFatalError(req,resp);resp.json(err);});}assignData(data){this.adminDb.setFoodMenus(data).then(res=>{console.log('setFoodMenu ::',res);console.log(res);}).catch(err=>{cli_logger_1.Logger.logError('setRecord :: error ::',err);});}setMenu(req,resp){console.log('req.body.restaurantId',req.body);let data=req.body;let deletedItemIds=data.deletedItemIds;console.log('::: IFoodMenuPostData ::',data);for(let menu in data.foodMenus){let menuObj=data.foodMenus[menu];for(let item of menuObj.items){}}if(fm_data_validator_1.FmDataValidator.foodMenusPostData(data)===false){base_controller_1.BaseController.extFatalError(req,resp,'MENU_DATA_INVALID');return;}this.adminDb.setFoodMenus(data).then(res=>{console.log('setFoodMenu ::',res);resp.json(res);}).catch(err=>{cli_logger_1.Logger.logError('setRecord :: error ::',err);base_controller_1.BaseController.extFatalError(req,resp);});}addMenuItem(menuId,catId,menuItem){let scope=this;let dbTrans=new db_transaction_1.DbTransaction();let result=false;async function beginTrans(){return dbTrans.beginTransaction();}async function commitTrans(){return dbTrans.commit();}async function rollbackTrans(){return dbTrans.rollback();}async function executeQuery(sql){return dbTrans.executeQuery(sql);}async function addItemTranslation(){return new Promise((resolve,reject)=>{resolve(true);});}async function addMenuItem(){await beginTrans();let dynSql=new sql_igniter_1.SqlIgniter();let dbData={'food_menu_id':menuId,'item_cat_id':catId,'item_ref':menuItem.ref,'weight':0};let dbRes=await executeQuery(dynSql.toSql());let newItemId=dbRes.lastInsertId;cli_logger_1.Logger.logPurple('LAST INSERT ID ::',newItemId);}return new Promise((resolve,reject)=>{addMenuItem().then(()=>{resolve(result);});});}addMenuCategory(req,resp){console.log('*** addMenuCategory');let categoryData={id:req.body.id,menuId:req.body.menuId,languageId:req.body.languageId,name:req.body.name,description:req.body.description,footer:req.body.footer,weight:req.body.weight};console.log('addMenuCategory ::',categoryData);this.adminDb.setCategory(categoryData).then(res=>{resp.json(res);}).catch(err=>{resp.json(err);});}};FoodMenuAdminController=__decorate([inversify_1.injectable(),__param(0,inversify_2.inject(interfaces_1.Inf.IFoodMenuDb)),__param(1,inversify_2.inject(interfaces_1.Inf.IFoodMenuAdminDb)),__param(2,inversify_2.inject(interfaces_1.Inf.IFoodMenuAdminDbBeta)),__param(3,inversify_2.inject(interfaces_1.Inf.IFmPriceConverter)),__metadata('design:paramtypes',[fm_db_1.FoodMenuDb,fm_admin_db_1.FoodMenuAdminDb,fm_admin_db_beta_1.FoodMenuAdminDbBeta,fm_price_converter_1.FmPriceConverter])],FoodMenuAdminController);exports.FoodMenuAdminController=FoodMenuAdminController;